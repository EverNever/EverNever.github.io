<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chace</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chace.in/"/>
  <updated>2017-09-07T14:27:09.000Z</updated>
  <id>http://chace.in/</id>
  
  <author>
    <name>chace</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux命令行大全(4)——shell编程</title>
    <link href="http://chace.in/2017/08/11/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8(4)%E2%80%94%E2%80%94shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://chace.in/2017/08/11/Linux命令行大全(4)——shell编程/</id>
    <published>2017-08-11T06:35:32.000Z</published>
    <updated>2017-09-07T14:27:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h2><p><strong>数值：</strong> 默认的bash程序中只支持整数运算，使用<code>bc</code>命令可用于浮点运算：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 数值运算需要在(())中</div><div class="line">echo $((<span class="number">1</span>+<span class="number">3</span><span class="number">-2</span>/<span class="number">5</span>*<span class="number">3</span>)) # 输出<span class="string">"4"</span></div><div class="line">echo $((<span class="number">2</span>**<span class="number">3</span>)) # 输出<span class="string">"8"</span></div><div class="line">bc &lt;&lt;&lt; '<span class="number">2.5</span>+<span class="number">4.9</span>*<span class="number">4.7</span>' # 输出<span class="string">"25.5"</span></div></pre></td></tr></table></figure></p><p><strong>字符串：</strong> 字符串的操作比较多：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">foo="Hello world"</div><div class="line">echo $&#123;#foo&#125; # 输出"11"</div><div class="line">m</div><div class="line">echo $&#123;foo/world/World&#125; # 输出"Hello World"</div></pre></td></tr></table></figure></p><p><strong>数组</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">declare -a a # 创建一个数值</div><div class="line">arr=("1" "2" "abc" "4" 5) # 数组赋值</div><div class="line">arr[0]=8 # 数组赋值</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 以下是*和@输出的区别，*是扩展成一串，而@分开了</span></div><div class="line">for i in "$&#123;arr[*]&#125;"; do echo $i; done</div><div class="line">8 2 abc 4 5</div><div class="line">for i in "$&#123;arr[@]&#125;"; do echo $i; done</div><div class="line">8</div><div class="line">2</div><div class="line">abc</div><div class="line">4</div><div class="line">5</div></pre></td></tr></table></figure></p><h2 id="2-分支、循环"><a href="#2-分支、循环" class="headerlink" title="2. 分支、循环"></a>2. 分支、循环</h2><p>跟类C语言大同小异，需要注意的是条件分支的test命令</p><p><strong>分支：</strong> test命令判断是否符合条件，其中传统的test命令形式为<code>[ express ]</code>，更为现代的形式为用于字符串和普通变量的<code>[[ express ]]</code>和用于数值的<code>(( express ))</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">string=20</div><div class="line"><span class="keyword">if</span> [ -z string ]; <span class="keyword">then</span> <span class="comment"># 判断字符串是否为空</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"string is empty"</span></div><div class="line"><span class="keyword">elif</span> [[ <span class="variable">$string</span> =~ ^h.+o$ ]]; <span class="keyword">then</span> <span class="comment"># 匹配正则表达式</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"string is right"</span></div><div class="line"><span class="keyword">elif</span> (( string&gt;10 )); <span class="keyword">then</span> <span class="comment"># 数值比较</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"string is greater than 10"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"string is not be matched"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="comment"># 输出"string is greater than 10"</span></div></pre></td></tr></table></figure></p><p><strong>循环：</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span>型</span></div><div class="line">count=1</div><div class="line">while [ $count -le 5 ]; do</div><div class="line">    printf "%d " $((count++))</div><div class="line">done</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> until型</span></div><div class="line">until [ $count -gt 10 ]; do</div><div class="line">    printf "%d " $((count++))</div><div class="line">done</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 输出<span class="string">"1 2 3 4 5 6 7 8 9 10"</span></span></div></pre></td></tr></table></figure></p><h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h2><p>shell中的函数定义如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[function] foo [()] &#123;</div><div class="line">    # action</div><div class="line">    [return int]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">定义其实是两种形式:</span></div><div class="line">function foo &#123;...&#125;</div><div class="line">foo () &#123;...&#125;</div><div class="line"></div><div class="line">foo # 函数调用</div></pre></td></tr></table></figure><p>不像类C语言在函数括号中传递参数，shell中使用<strong>位置参数</strong>来进行参数传递。shell中的返回值通过<code>$?</code>接收。<br>如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">foo () &#123;</div><div class="line">    echo $0 # 输出的永远是运行脚本的命令本身</div><div class="line">    echo $($1+$2) # 输出58</div><div class="line">    return (($1+$2+2)) # 返回60，返回值范围是0~255整数</div><div class="line">&#125;</div><div class="line">foo 13 45 # 函数调用</div><div class="line">echo $? # 输出的是最后一次调用foo的返回值60</div></pre></td></tr></table></figure><p>一些特殊的参数如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">echo $$ # 输出当前进程pid</div><div class="line">echo $# # 输出命令参数个数</div><div class="line">echo $? # 输出函数返回值</div><div class="line">echo $! # 输出后台中最后一次运行的进程pid</div></pre></td></tr></table></figure></p><h2 id="4-实现quicksort"><a href="#4-实现quicksort" class="headerlink" title="4. 实现quicksort"></a>4. 实现quicksort</h2><p>拿个quicksort来作为练习倒是一个不错的选择</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash -x</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> a quicksort algorithm implement <span class="keyword">in</span> shell</span></div><div class="line"></div><div class="line">arr=(3 23 4 1 45 56 34 78 79 89)</div><div class="line"></div><div class="line">get_pos() &#123;</div><div class="line">    local low=$1</div><div class="line">    local high=$2</div><div class="line">    local value=$&#123;arr[$low]&#125; # 数组取值</div><div class="line"></div><div class="line">    while (( $low&lt;$high )); do</div><div class="line">        while (( $low&lt;$high &amp;&amp; $value&lt;=$&#123;arr[$high]&#125; )); do</div><div class="line">            high=$(($high-1))</div><div class="line">        done</div><div class="line">        if (( $low&lt;$high )); then</div><div class="line">            arr[$low]=$&#123;arr[$high]&#125;</div><div class="line">            ((++low)) # 整数运算只能在(())中</div><div class="line">        fi</div><div class="line">        while (( $low&lt;$high &amp;&amp; $value&gt;=$&#123;arr[$low]&#125; )); do</div><div class="line">            low=$(($low+1))</div><div class="line">        done</div><div class="line">        if (( $low&lt;$high )); then</div><div class="line">            arr[$high]=$&#123;arr[$low]&#125;</div><div class="line">            ((--high)) # 整数运算只能在(())中</div><div class="line">        fi</div><div class="line">    done</div><div class="line"></div><div class="line">    arr[$low]=$value</div><div class="line">    return $low</div><div class="line">&#125;</div><div class="line"></div><div class="line">quicksort() &#123;</div><div class="line">    local low=$1</div><div class="line">    local high=$2</div><div class="line">    local pos=0</div><div class="line">    local tempLow=0</div><div class="line">    local tempHigh=0</div><div class="line">    if (( $low&lt;$high )); then</div><div class="line">        get_pos $low $high</div><div class="line">        pos=$? # 获得返回值</div><div class="line">        tempLow=$(($pos-1))</div><div class="line">        tempHigh=$(($pos+1))</div><div class="line">        quicksort $low $tempLow</div><div class="line">        quicksort $tempHigh $high</div><div class="line">    fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">quicksort 0 9 # 调用函数</div><div class="line"></div><div class="line">echo $&#123;arr[@]&#125; # 另一种形式是$&#123;arr[*]&#125;，两者区别在前者扩展数组单个元素，后者将数组扩展成一个长串</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-数据类型&quot;&gt;&lt;a href=&quot;#1-数据类型&quot; class=&quot;headerlink&quot; title=&quot;1. 数据类型&quot;&gt;&lt;/a&gt;1. 数据类型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数值：&lt;/strong&gt; 默认的bash程序中只支持整数运算，使用&lt;code&gt;bc&lt;/c
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chace.in/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令行大全(3)——常见任务和工具</title>
    <link href="http://chace.in/2017/08/11/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8(3)%E2%80%94%E2%80%94%E5%B8%B8%E8%A7%81%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%B7%A5%E5%85%B7/"/>
    <id>http://chace.in/2017/08/11/Linux命令行大全(3)——常见任务和工具/</id>
    <published>2017-08-11T06:33:32.000Z</published>
    <updated>2017-09-07T14:27:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-软件包管理"><a href="#1-软件包管理" class="headerlink" title="1. 软件包管理"></a>1. 软件包管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-cache search pkg_name # 查找软件包</div><div class="line">apt-cache show pgk_name # 显示软件包信息</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dpkg -i pkg_file # 用.deb安装软件包</div><div class="line">dpkg --list # 列出已安装的软件包列表</div><div class="line">dpkg --status pkg_name # 判断软件包是否已安装</div><div class="line">dpkg --search file_name # 查看某文件由哪个软件包安装得到</div></pre></td></tr></table></figure><h2 id="2-存储"><a href="#2-存储" class="headerlink" title="2. 存储"></a>2. 存储</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mount</div><div class="line">umount /dev/hdc</div><div class="line">fdisk # 磁盘分区</div><div class="line">mkfs -t vfat /dev/sdb1 # 创建文件系统</div><div class="line">dd if=/dev/sdb of=/dev/sdc # 完全复制数据块</div><div class="line">md5sum /dev/cdrom</div></pre></td></tr></table></figure><h2 id="3-网络"><a href="#3-网络" class="headerlink" title="3. 网络"></a>3. 网络</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget scp ssh</div><div class="line">netstat -ie # 显示网络状态 ifconfig</div><div class="line">netstat -r # 显示路由表</div><div class="line">sftp # 此命令尤其好使，因为sftp使用的是ssh的22端口，所以不需要服务器单独再开服务</div></pre></td></tr></table></figure><h2 id="4-文件搜索"><a href="#4-文件搜索" class="headerlink" title="4. 文件搜索"></a>4. 文件搜索</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">find ~ -type f -name '*.bak' -delete # 查找用户目录下.bak文件并删除</div><div class="line">find ~ -type f | wc -l # 统计用户目录下文件个数</div><div class="line">find的两个选项：test和action</div></pre></td></tr></table></figure><h2 id="5-文件归档和压缩"><a href="#5-文件归档和压缩" class="headerlink" title="5. 文件归档和压缩"></a>5. 文件归档和压缩</h2><p>文件归档和压缩是两个概念，zip命令同时包括两种功能</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -av <span class="params">&lt;dir1&gt;</span> <span class="params">&lt;dir2&gt;</span> <span class="meta"># 同步dir1和dir2</span></div></pre></td></tr></table></figure><p><strong>压缩</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gzip gunzip bzip2 bunzip2</div></pre></td></tr></table></figure><p><strong>归档</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xzvf &lt;file_name&gt; -C &lt;dir&gt; # 解压到&lt;dir&gt;文件夹下</div><div class="line">tar czvf &lt;file_name&gt; &lt;dir&gt; # 打包dir到file_name</div><div class="line">zip -r &lt;dir&gt; # 压缩dir</div></pre></td></tr></table></figure></p><p><strong>将远程系统中某目录转移到本地系统</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh remote-sys 'tar cf - &lt;dir&gt;' <span class="string">| tar xf -</span></div></pre></td></tr></table></figure><h2 id="6-正则表达式"><a href="#6-正则表达式" class="headerlink" title="6. 正则表达式"></a>6. 正则表达式</h2><p>BRE POSIX基本正则表达式 <code>grep &#39;...&#39;</code></p><p>ERE 扩展正则表达式 <code>grep -E &#39;...&#39;</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">find</span> <span class="symbol">&lt;dir&gt;</span> -regex <span class="string">'&lt;regex&gt;'</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">? * + &#123;&#125; . <span class="selector-attr">[]</span> # 元字符</div></pre></td></tr></table></figure><h2 id="7-文本处理"><a href="#7-文本处理" class="headerlink" title="7. 文本处理"></a>7. 文本处理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cut -f &lt;字段编号&gt; &lt;file_name&gt; # 切片某字段</div><div class="line">cat -n # 显示行号</div><div class="line">aspell # 拼写检查</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 比较两文件的不同产生一个patch，并且还原文件</span></div><div class="line">diff -Naur &lt;old_file&gt; &lt;new_file&gt; &gt; file_patch</div><div class="line">patch &lt; file_patch</div><div class="line"></div><div class="line">diff -c/-u &lt;file_1&gt; &lt;file_2&gt; # 将file_1与file_2进行比较</div></pre></td></tr></table></figure><h2 id="8-格式化输出"><a href="#8-格式化输出" class="headerlink" title="8. 格式化输出"></a>8. 格式化输出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">printf "format" arguments # 格式化输出</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 输出manual到PDF文件</span></div><div class="line">zcat /usr/share/man/man1/ls.1.gz | groff -mandoc &gt; ~/foo.ps</div><div class="line">ps2pdf foo.ps ls.pdf</div><div class="line"></div><div class="line">a2ps -o ~/ls.ps # ASCII-&gt;PostScript</div><div class="line">lpstat -s # 查看打印机状态</div></pre></td></tr></table></figure><h2 id="9-编译程序"><a href="#9-编译程序" class="headerlink" title="9. 编译程序"></a>9. 编译程序</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">make # 编译程序</div><div class="line">./configure # 分析生成环境</div><div class="line">make install # 默认安装到/usr/local/bin</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-软件包管理&quot;&gt;&lt;a href=&quot;#1-软件包管理&quot; class=&quot;headerlink&quot; title=&quot;1. 软件包管理&quot;&gt;&lt;/a&gt;1. 软件包管理&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chace.in/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令行大全(2)——配置与环境</title>
    <link href="http://chace.in/2017/08/11/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8(2)%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%8E%AF%E5%A2%83/"/>
    <id>http://chace.in/2017/08/11/Linux命令行大全(2)——配置与环境/</id>
    <published>2017-08-11T06:32:35.000Z</published>
    <updated>2017-09-07T14:27:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">printenv | less # 查看本机的各种环境变量</div><div class="line">alias ll=“ls -laF” # 为命令起别名</div></pre></td></tr></table></figure><h2 id="2-vi的使用"><a href="#2-vi的使用" class="headerlink" title="2.vi的使用"></a>2.vi的使用</h2><p>移动光标、删除、复制粘贴对比来记忆就很容易了，都一样。</p><p><strong>移动光标</strong></p><table><thead><tr><th style="text-align:left">键</th><th style="text-align:left">动作</th></tr></thead><tbody><tr><td style="text-align:left">数字0</td><td style="text-align:left">至本行开头</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">至本行末尾</td></tr><tr><td style="text-align:left">G</td><td style="text-align:left">至文件末尾</td></tr><tr><td style="text-align:left">gg</td><td style="text-align:left">至文件开头</td></tr><tr><td style="text-align:left">ctrl+F</td><td style="text-align:left">下翻一页</td></tr><tr><td style="text-align:left">ctrl+B</td><td style="text-align:left">上翻一页</td></tr><tr><td style="text-align:left">number+G</td><td style="text-align:left">至第number行</td></tr></tbody></table><p><strong>删除文本</strong></p><table><thead><tr><th style="text-align:left">键</th><th style="text-align:left">动作</th></tr></thead><tbody><tr><td style="text-align:left">dd</td><td style="text-align:left">删除一行</td></tr><tr><td style="text-align:left">d$</td><td style="text-align:left">删除光标到行末尾</td></tr><tr><td style="text-align:left">d0</td><td style="text-align:left">删除光标到行开头</td></tr><tr><td style="text-align:left">d7</td><td style="text-align:left">删除光标后的7行</td></tr></tbody></table><p><strong>复制粘贴</strong></p><table><thead><tr><th style="text-align:left">键</th><th style="text-align:left">动作</th></tr></thead><tbody><tr><td style="text-align:left">p</td><td style="text-align:left">粘贴文本</td></tr><tr><td style="text-align:left">yy</td><td style="text-align:left">复制一行</td></tr><tr><td style="text-align:left">y$</td><td style="text-align:left">复制到行末尾</td></tr><tr><td style="text-align:left">y0</td><td style="text-align:left">复制到行开头</td></tr><tr><td style="text-align:left">y7</td><td style="text-align:left">复制光标后的7行</td></tr></tbody></table><p><strong>搜索</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/pattern # 按n查找下一个</div><div class="line">:%s/pattern_old/pattern_new/g # 全局替换</div></pre></td></tr></table></figure><p><strong>多文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">:n # 切换下一个</div><div class="line">:N # 切换上一个</div><div class="line">:buffers # 正在编辑的文件</div><div class="line">:buffer 2 # 切换到第2个文件</div><div class="line"></div><div class="line">:e &lt;filename&gt; # 打开一个新的文件</div><div class="line">:r &lt;filename&gt; # 将filename的内容整个复制到当前文件中，光标前</div><div class="line"></div><div class="line">:w &lt;filename&gt; # 另存为新文件</div><div class="line">ZZ # 相当于:wq，智障操作</div></pre></td></tr></table></figure><h2 id="3-提示符"><a href="#3-提示符" class="headerlink" title="3.提示符"></a>3.提示符</h2><p>环境变量<code>PS1</code>中保存的是提示符信息，喜欢可以自己随便改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-环境&quot;&gt;&lt;a href=&quot;#1-环境&quot; class=&quot;headerlink&quot; title=&quot;1.环境&quot;&gt;&lt;/a&gt;1.环境&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chace.in/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令行大全(1)——shell入门</title>
    <link href="http://chace.in/2017/08/11/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8(1)%E2%80%94%E2%80%94shell%E5%85%A5%E9%97%A8/"/>
    <id>http://chace.in/2017/08/11/Linux命令行大全(1)——shell入门/</id>
    <published>2017-08-11T06:30:32.000Z</published>
    <updated>2017-09-07T14:26:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然一直在用Linux，也折腾过很多命令，但是因为缺乏系统的学习，所以常用到的命令也就那么些，对于Linux更多的命令，自己是缺乏了解的。</p><p>趁着暑假的时间，自己学完了这本《Linux命令行大全》，总体而言这本书讲的还是比较浅，缺乏深入，但是我本身就只是抱着学习命令的态度，所以一路看下来，倒也不至于失望。</p><p>如果只是想学习Linux命令入门，这本书挺好的；但是如果想深入学习Linux的使用，甚至内核开发，那还是另请高明吧！</p><p>以下四篇，是我在看这本书的过程中记录的笔记，有所整理，尽量涵盖主要命令，同时去除掉书中一些冗余的地方。</p><h2 id="1-导航类"><a href="#1-导航类" class="headerlink" title="1. 导航类"></a>1. 导航类</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd - # 返回上一次位置</div><div class="line">ls -la # 显示隐藏文件和长格式</div><div class="line">ls -d # 显示文件夹本身的详细信息，而不是文件夹内的文件信息</div><div class="line">/bin # 系统可执行文件</div><div class="line">/etc # 配置文件</div><div class="line">/usr # 普通用户使用的所有文件和程序</div><div class="line">/usr/include # C语言系统头文件</div><div class="line">/usr/bin # 用户大部分可执行文件</div></pre></td></tr></table></figure><h2 id="2-操作文件与目录"><a href="#2-操作文件与目录" class="headerlink" title="2. 操作文件与目录"></a>2. 操作文件与目录</h2><p><code>-r</code> 一般用于文件夹目录树的递归操作，复制、删除等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir    cp    mv</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -r &lt;dir&gt;</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 建立硬链接和软链接</div><div class="line">in &lt;file&gt; &lt;file_hard&gt;</div><div class="line">in -s &lt;file&gt; &lt;file_soft&gt;</div></pre></td></tr></table></figure><h2 id="3-查看命令的属性"><a href="#3-查看命令的属性" class="headerlink" title="3. 查看命令的属性"></a>3. 查看命令的属性</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span>    <span class="type">which    </span>whatis</div></pre></td></tr></table></figure><p>最重要的命令：man、info、help<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man -k &lt;search_string&gt; # 查找哪些命令可用</div></pre></td></tr></table></figure></p><h2 id="4-重定向"><a href="#4-重定向" class="headerlink" title="4. 重定向"></a>4. 重定向</h2><p>重定向符和管道符的区别：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">重定向符将stdout重定向到&gt;后接的文件中；</div><div class="line">管道<span class="keyword">A</span>|B将程序<span class="keyword">A</span>的标准输出重定向到程序B的标准输入中。</div></pre></td></tr></table></figure></p><p>重定向：<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;  标准输出重定向</div><div class="line"><span class="meta">2&gt; </span> 标准错误重定向</div><div class="line">&amp;&gt; 标准输出+标准错误重定向</div><div class="line">&gt;&amp;<span class="number">2</span> 标准输出重定向到标准错误中 （可用于shell脚本输出错误信息）</div></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wc -l # 统计行数  </div><div class="line">wc -w # 统计字数</div><div class="line">head/tail -n &lt;num&gt;</div><div class="line">tee # 读取标准输入，同时输出到标准输出和文件中，相当于可以在中途截取掉信息。</div></pre></td></tr></table></figure><h2 id="5-快捷键"><a href="#5-快捷键" class="headerlink" title="5. 快捷键"></a>5. 快捷键</h2><table><thead><tr><th style="text-align:left">键</th><th style="text-align:left">动作</th><th style="text-align:left">键</th><th style="text-align:left">动作</th></tr></thead><tbody><tr><td style="text-align:left">Ctrl+A</td><td style="text-align:left">移动到行首</td><td style="text-align:left">Ctrl+E</td><td style="text-align:left">移动到行尾</td></tr><tr><td style="text-align:left">Alt+F</td><td style="text-align:left">往前一个字</td><td style="text-align:left">Alt+B</td><td style="text-align:left">往后一个字</td></tr><tr><td style="text-align:left">Ctrl+Y</td><td style="text-align:left">粘贴</td><td style="text-align:left">Ctrl+L</td><td style="text-align:left">清屏</td></tr><tr><td style="text-align:left">Ctrl+K</td><td style="text-align:left">向后剪切到行尾</td><td style="text-align:left">Ctrl+U</td><td style="text-align:left">向前剪切到行头</td></tr></tbody></table><h2 id="6-权限"><a href="#6-权限" class="headerlink" title="6. 权限"></a>6. 权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">su    passwd</div><div class="line">chmod xxx &lt;file&gt;</div><div class="line">chown [ower][:[group]] &lt;file&gt;</div></pre></td></tr></table></figure><h2 id="7-进程"><a href="#7-进程" class="headerlink" title="7. 进程"></a>7. 进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ps    top    pstree</div><div class="line">kill -9 &lt;pid/jobspec&gt; # 杀死进程</div><div class="line">kill -l # 查看所有信号格式</div><div class="line">killall -9 &lt;name&gt; # 杀死指定程序的所有进程</div></pre></td></tr></table></figure><p>前后台进程切换：</p><p><img src="process-switch.png" alt="前后台进程切换"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然一直在用Linux，也折腾过很多命令，但是因为缺乏系统的学习，所以常用到的命令也就那么些，对于Linux更多的命令，自己是缺乏了解的。&lt;/p&gt;
&lt;p&gt;趁着暑假的时间，自己学完了这本《Linux命令行大全》，总体而言这本书讲的还是比较浅，缺乏深入，但是我本身就只是抱着学习
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://chace.in/tags/Linux/"/>
    
  </entry>
  
</feed>
